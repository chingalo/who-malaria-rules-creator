{
    "function": "//Example of function implementation\nparameters.progress(0);\n//get expression and expresiion map form rule\nvar expressionMapping = parameters.rule.json.expressionMapping;\nvar namesMapping = parameters.rule.json.namesMapping\nvar expression = parameters.rule.json.expression;\n// get all uids form expression\nvar dataElements = getUidsFromExpression(expression);\n//checking for all de uids has mapper\nvar mappingStatus = getDataElementMappingStatus(dataElements,expressionMapping);\n//@todo remove skip logic in case result of mapping is false\nif(mappingStatus.areAllMapped){\n    //get analytics results\n    var dx=dataElements.join(\";\");\n    loadingAndEvaluateAnalyticsData(dx,expression,dataElements);\n}else{\n    // return error message with unmapped de\n    var errorMessage = getMissingDataElementsMappingErrorMessage(mappingStatus.dataElementWithoutMapping,namesMapping)\n    parameters.error(errorMessage);\n}\n\nfunction loadingAndEvaluateAnalyticsData(dx,expression,dataElements){\n    $.ajax({\n\turl: \"../../../api/analytics.json?dimension=dx:\" + dx + \"&dimension=pe:\" + parameters.pe + \"&dimension=ou:\" + parameters.ou,\n\ttype: \"GET\",\n\tsuccess: function(analyticsResults) {\n\t    //evaluate expression and and get new analytic object\n\t    \n\t\tparameters.success(getSanitizedAnalytict(analyticsResults,parameters));\n\t},\n\terror:function(error){\n\t\t  parameters.error(error);\n\t    }\n    })\n}\n\nfunction getDataElementMappingStatus(dataElements,expressionMapping){\n    var areAllMapped = true;\n    var dataElementWithoutMapping = []\n    dataElements.forEach(function(dataElement){\n        var hasBeenMapped  = false;\n        Object.keys(expressionMapping).forEach(function(key){\n            if(expressionMapping[key] === dataElement){\n              hasBeenMapped = true;  \n            }\n        })\n        if(!hasBeenMapped){\n            dataElementWithoutMapping = dataElementWithoutMapping.concat(dataElement);\n            areAllMapped = false;\n        }\n    });\n    return {areAllMapped,dataElementWithoutMapping};\n}\n\nfunction getUidsFromExpression(expression ){\n    var uids = [];\n    var matchRegrex = /(\\{.*?\\})/gi;\n    expression.match(matchRegrex).forEach(function(value){\n        uids = uids.concat(value.replace(\"{\", ':separator:').replace(\"}\", ':separator:').split(':separator:').filter(content => content.length > 0));\n    });\n    return uids;\n}\n\nfunction getMissingDataElementsMappingErrorMessage(dataElementsIds,namesMapping){\n    var errorMessage = {\"httpStatus\":\"Conflict\",\"httpStatusCode\":409,\"status\":\"ERROR\",\"message\":\"\"};\n    var missingDataElementNames = [];\n    dataElementsIds.forEach(function(id){\n        if(namesMapping[id]){\n          missingDataElementNames.push(namesMapping[id])  \n        }else{\n            missingDataElementNames.push(id) \n        }\n    })\n    errorMessage.message += missingDataElementNames.join(\",\") + \" have not been mapped\";\n    return errorMessage;\n}\n\nfunction getSanitizedAnalytict(analyticsResults,parameters){\n    var analytics = {\"headers\":[{\"name\":\"dx\",\"column\":\"Data\",\"valueType\":\"TEXT\",\"type\":\"java.lang.String\",\"hidden\":false,\"meta\":true},{\"name\":\"pe\",\"column\":\"Period\",\"valueType\":\"TEXT\",\"type\":\"java.lang.String\",\"hidden\":false,\"meta\":true},{\"name\":\"ou\",\"column\":\"Organisation unit\",\"valueType\":\"TEXT\",\"type\":\"java.lang.String\",\"hidden\":false,\"meta\":true},{\"name\":\"value\",\"column\":\"Value\",\"valueType\":\"NUMBER\",\"type\":\"java.lang.Double\",\"hidden\":false,\"meta\":false}],\"metaData\":{\"items\":{\"dx\":{\"name\":\"Data\"},\"pe\":{\"name\":\"Period\"},\"ou\":{\"name\":\"Organisation unit\"}},\"dimensions\":{\"dx\":[],\"pe\":[],\"ou\":[],\"co\":[]}},\"rows\":[],\"width\":4,\"height\":0};\n    var ous = [];\n    var periods = [];\n    if(analyticsResults && analyticsResults.metaData && analyticsResults.metaData.dimensions){\n        periods = periods.concat(analyticsResults.metaData.dimensions.pe);\n        ous = ous.concat(analyticsResults.metaData.dimensions.ou);\n        periods.forEach(function(pe){\n           analytics.metaData.items[pe] = analyticsResults.metaData.items[pe];\n        });\n         ous.forEach(function(ou){\n           analytics.metaData.items[ou] = analyticsResults.metaData.items[ou];\n        });\n        \n    }else if(analyticsResults && analyticsResults.metaData && analyticsResults.metaData.pe){\n        periods = periods.concat(analyticsResults.metaData.pe);\n        ous = ous.concat(analyticsResults.metaData.ou);\n        if(analyticsResults.metaData.names){\n            periods.forEach(function(pe){\n                analytics.metaData.items[pe] = {\"name\": analyticsResults.metaData.names[pe]};\n            });\n             ous.forEach(function(ou){\n               analytics.metaData.items[ou] = {\"name\": analyticsResults.metaData.names[ou]};\n            }); \n        }\n    }\n    \n    var rule = parameters.rule;\n    analytics.metaData.items[rule.id] = {\"name\" : rule.name};\n    analytics.metaData.dimensions.dx = analytics.metaData.dimensions.dx.concat(rule.id)\n    analytics.metaData.dimensions.pe = analytics.metaData.dimensions.pe.concat(periods)\n    analytics.metaData.dimensions.ou = analytics.metaData.dimensions.dx.concat(ous);\n    \n    if(ous.length > 0 && periods.length > 0){\n        // get key value pair\n        ous.forEach(function(ou){\n            periods.forEach(function(pe){\n                var keyValuePair = getDataElementValuePair(ou,pe,analyticsResults.rows);\n                //get evaulated values of rule\n                var evaluatedValue = getEvaluatedValueOfRule(rule.json.expression, keyValuePair);\n                //adding values on row\n                analytics.rows.push([rule.id,pe,ou,evaluatedValue]);\n            })\n        })\n    }\n    analytics.height = analytics.rows.length;\n    return analytics;\n}\n\nfunction getDataElementValuePair(ou,pe,rows){\n    var keyValuePair = {};\n    rows.forEach(function(row){\n        var key = row[0];\n        if(!keyValuePair[key]){\n           keyValuePair[key] = 0; \n        }\n        if(row.length === 4){\n          var rowPe = row[1];\n          var rowOu = row[2];\n          var value = row[3];  \n          if(rowPe === pe && rowOu === ou){\n              var oldValue = parseInt(keyValuePair[key],10);\n              var newValue = oldValue + parseInt(value,10);\n              keyValuePair[key] = newValue.toFixed(1);   \n          }\n        }\n    });\n    return keyValuePair;\n}\n\nfunction getEvaluatedValueOfRule(expression, keyValuePair){\n    var evaluatedValue = 0;\n    var formulaPattern = /#\\{.+?\\}/g;\n    var matcher = expression.match(formulaPattern);\n    matcher.forEach(function(match) {\n        var operand = match.replace(/[#\\{\\}]/g, '');\n        if(keyValuePair[operand]){\n            expression = expression.replace(match, parseInt(keyValuePair[operand],10));\n        }\n        try{\n            if(!isNaN(eval(expression))){\n                evaluatedValue = eval(expression);\n            }\n        }catch(e){\n            \n        }\n    });\n    return evaluatedValue.toFixed(1);\n}\n\n\n\n\n\n\n\n\n",
    "name": "who malaria",
    "description": "Function for control who's indicator calculations",
    "id": "whoMalariafn",
    "created": "2018-08-20T08:04:06.102Z",
    "lastUpdated": "2018-08-28T15:37:07.772Z",
    "externalAccess": false,
    "userGroupAccesses": [],
    "attributeValues": [],
    "translations": [],
    "userAccesses": [],
    "publicAccess": "rw------",
    "user": {
        "id": ""
    },
    "href": "https://test.hisptz.org/dhis?api/dataStore/functions/whoMalariafn",
    "displayName": "who malaria",
    "selected": true,
    "active": true
}